// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TNEB.Shutdown.Notifier.Web.Data;

#nullable disable

namespace TNEB.Shutdown.Notifier.Web.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231224091949_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TNEB.Shutdown.Notifier.Web.Data.Models.Circle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Value")
                        .IsUnique();

                    b.ToTable("Circles");
                });

            modelBuilder.Entity("TNEB.Shutdown.Notifier.Web.Data.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CircleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CircleId", "Name")
                        .IsUnique()
                        .HasFilter("[CircleId] IS NOT NULL");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("TNEB.Shutdown.Notifier.Web.Data.Models.LocationStandardization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StandardizedLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LocationStandardization");
                });

            modelBuilder.Entity("TNEB.Shutdown.Notifier.Web.Data.Models.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CircleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Date")
                        .HasColumnType("bigint");

                    b.Property<string>("Feeder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("From")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScrappedScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubStation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("To")
                        .HasColumnType("bigint");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOfWork")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CircleId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ScrappedScheduleId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("TNEB.Shutdown.Notifier.Web.Data.Models.ScrappedSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CircleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset")
                        .HasAnnotation("Relational:JsonPropertyName", "date");

                    b.Property<string>("Feeder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "feeder");

                    b.Property<DateTimeOffset>("From")
                        .HasColumnType("datetimeoffset")
                        .HasAnnotation("Relational:JsonPropertyName", "from");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "location");

                    b.Property<string>("SubStation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "subStation");

                    b.Property<DateTimeOffset>("To")
                        .HasColumnType("datetimeoffset")
                        .HasAnnotation("Relational:JsonPropertyName", "to");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "town");

                    b.Property<string>("TypeOfWork")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "typeOfWork");

                    b.HasKey("Id");

                    b.HasIndex("CircleId");

                    b.ToTable("ScrappedSchedules");
                });

            modelBuilder.Entity("TNEB.Shutdown.Notifier.Web.Data.Models.Location", b =>
                {
                    b.HasOne("TNEB.Shutdown.Notifier.Web.Data.Models.Circle", "Circle")
                        .WithMany()
                        .HasForeignKey("CircleId");

                    b.Navigation("Circle");
                });

            modelBuilder.Entity("TNEB.Shutdown.Notifier.Web.Data.Models.Schedule", b =>
                {
                    b.HasOne("TNEB.Shutdown.Notifier.Web.Data.Models.Circle", "Circle")
                        .WithMany()
                        .HasForeignKey("CircleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TNEB.Shutdown.Notifier.Web.Data.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TNEB.Shutdown.Notifier.Web.Data.Models.ScrappedSchedule", "ScrappedSchedule")
                        .WithMany()
                        .HasForeignKey("ScrappedScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Circle");

                    b.Navigation("Location");

                    b.Navigation("ScrappedSchedule");
                });

            modelBuilder.Entity("TNEB.Shutdown.Notifier.Web.Data.Models.ScrappedSchedule", b =>
                {
                    b.HasOne("TNEB.Shutdown.Notifier.Web.Data.Models.Circle", "Circle")
                        .WithMany()
                        .HasForeignKey("CircleId");

                    b.Navigation("Circle");
                });
#pragma warning restore 612, 618
        }
    }
}
